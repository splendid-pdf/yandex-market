plugins {
    id 'com.marketplace.common'
    alias libs.plugins.jib
    alias libs.plugins.spring.boot
    alias libs.plugins.spring.dependency.management
}

ext {
    set('springCloudVersion', "2022.0.1")
    set('testcontainersVersion', "1.17.6")
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // spring cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // db
    implementation 'org.flywaydb:flyway-core:9.16.0'
    runtimeOnly 'org.postgresql:postgresql'

    // monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.10.5'

    //kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:rabbitmq'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jib {
    from {
        image = 'gcr.io/distroless/java17-debian11'
    }
    to {
        image = "${dockerHubUsername}/${project.name}:${project.version}"
        tags = [version, project.getVersion()] as List<String>
        auth {
            username = dockerHubUsername
            password = dockerHubPassword
        }
    }
    container {
        creationTime = Instant.now().toString()
        format = com.google.cloud.tools.jib.api.buildplan.ImageFormat.OCI
    }
}

tasks.register("prepareKotlinBuildScriptModel"){}