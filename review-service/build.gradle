plugins {
    id 'java'
    id "org.flywaydb.flyway" version "9.14.1"
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

ext {
    set('flywayCoreVersion', '9.14.1')
    set("springCloudConfigVersion", "2022.0.1");
}

dependencies {
    implementation project(':commons')
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //spring cloud
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    // mapper
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'

    // pdf
    implementation 'com.itextpdf:itextpdf:5.5.13.3'

    // open api
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    // db
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.flywaydb:flyway-core:${flywayCoreVersion}"

    // monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // annotation processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
    testImplementation 'org.testcontainers:postgresql:1.17.6'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudConfigVersion}"
    }
}

bootBuildImage {
    def account = rootProject.property('dockerHubUsername')
    imageName = "${account}/${project.name}:${project.version}"
    publish = true
    environment = [
            "BP_JVM_VERSION" : "${compileJava.sourceCompatibility}"
    ]
    docker {
        publishRegistry {
            username = account
            password = rootProject.property('dockerHubPassword')
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}