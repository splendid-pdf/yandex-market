plugins {
    id 'pmd'
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

ext {
    set("mapstructVersion", "1.5.3.Final")
    set('openapiUiVersion', '2.0.2')
    set('lombokVersion', '1.18.24')
    set('mockitoInlineVersion', '4.10.0')
    set("h2databaseVersion", "2.1.214")
    set("springCloudConfigVersion", "2022.0.1");
}

dependencies {
    implementation project(':commons')

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    //spring cloud
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    // mapper
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    // db
    runtimeOnly 'org.postgresql:postgresql'

    // open api
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapiUiVersion}"

    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // annotation processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.mockito:mockito-inline:${mockitoInlineVersion}"
    testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
    testImplementation 'org.testcontainers:postgresql:1.17.6'
    testImplementation "com.h2database:h2:${h2databaseVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudConfigVersion}"
    }
}

bootBuildImage {
    def account = rootProject.property('dockerHubUsername')
    imageName = "${account}/${project.name}:${project.version}"
    publish = true
    environment = [
            "BP_JVM_VERSION": "${compileJava.sourceCompatibility}"
    ]
    docker {
        publishRegistry {
            username = account
            password = rootProject.property('dockerHubPassword')
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

pmd {
    toolVersion = '6.53.0'
    consoleOutput = true
    ignoreFailures = true
    ruleSetFiles = files("${rootDir}/ruleset.xml")
    ruleSets = []
}