plugins {
    id 'com.marketplace.common'
    id 'com.marketplace.common.spring'
    alias libs.plugins.jib
    alias libs.plugins.spring.boot
    alias libs.plugins.spring.dependency.management
}

ext {
    set("springCloudConfigVersion", "2022.0.1");
}

dependencies {
    implementation project(':commons')

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    //spring cloud
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    // db
    runtimeOnly libs.postgres

    // annotation processor
    annotationProcessor libs.spring.config.processor

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation libs.h2.database
    testImplementation libs.mockito.inline
    testImplementation libs.testcontainers.junit
    testImplementation libs.testcontainers.postgresql
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudConfigVersion}"
    }
}

jib {
    from {
        image = 'gcr.io/distroless/java17-debian11'
    }
    to {
        image = "${dockerHubUsername}/${project.name}:${project.version}"
        tags = [version, project.getVersion()] as List<String>
        auth {
            username = dockerHubUsername
            password = dockerHubPassword
        }
    }
    container {
        creationTime = Instant.now().toString()
        format = com.google.cloud.tools.jib.api.buildplan.ImageFormat.OCI
    }
}