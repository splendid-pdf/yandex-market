import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'pmd'
    id 'java'
    id 'org.openapi.generator' version '6.2.1'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

ext {
    set('flywayCoreVersion', '9.10.2')
    set('swaggerVersion', '2.2.7')
    set('mockitoInlineVersion', '4.10.0')
    set('apacheCommonsLangVersion', '3.12.0')
    set('jetbrainsAnnotationsVersion', '23.1.0')
    set('openapitoolsJacksonDatabindVersion', '0.2.4')
    set('apacheCommonsValidator', '1.7')
    set('springCloudVersion', "2022.0.1")

}

dependencies {
    implementation project(':commons')

    // spring
    implementation "org.flywaydb:flyway-core:${flywayCoreVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    //spring cloud
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // db
    implementation "org.flywaydb:flyway-core:${flywayCoreVersion}"
    runtimeOnly 'org.postgresql:postgresql'

    // utils
    compileOnly "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"
    implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
    implementation "commons-validator:commons-validator:${apacheCommonsValidator}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // open api
    implementation "org.openapitools:jackson-databind-nullable:${openapitoolsJacksonDatabindVersion}"
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.mockito:mockito-inline:${mockitoInlineVersion}"
    testImplementation 'com.h2database:h2:2.1.214'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootBuildImage {
    def account = rootProject.property('dockerHubUsername')
    imageName = "${account}/${project.name}:${project.version}"
    publish = true
    environment = [
            "BP_JVM_VERSION" : "${compileJava.sourceCompatibility}"
    ]
    docker {
        publishRegistry {
            username = account
            password = rootProject.property('dockerHubPassword')
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

def generatedDir = "${buildDir}/generated"

tasks.register('generateOpenApi', GenerateTask) {
    generatorName = 'spring'
    inputSpec = "$projectDir/openapi/docs/spec.yaml"
    outputDir = generatedDir
    configOptions = [
            interfaceOnly       : 'true',
            artifactDescription : 'User Info service',
            artifactId          : project.name,
            artifactVersion     : project.version.toString(),
            artifactUrl         : 'https://github.com/splendid-pdf/yandex-market/tree/master/user-info-service',
            serializationLibrary: 'jackson',
            apiPackage          : 'org.openapitools.api.controller',
            modelPackage        : 'org.openapitools.api.model',
            sourceFolder        : 'src/main/java',
            useSpringBoot3      : 'true'
    ]
}

compileJava.dependsOn tasks.generateOpenApi

sourceSets {
    main {
        java.srcDirs += generatedDir + '/src/main/java'
    }
}

pmd {
    toolVersion = '6.53.0'
    consoleOutput = true
    ignoreFailures = true
    ruleSetFiles = files("${rootDir}/ruleset.xml")
    ruleSets = []
}