openapi: 3.0.3
info:
  title: Swagger User-Info Serivce - OpenAPI 3.0
  version: 0.0.1
  description: |-
    Developed by Vlad, Arkady and Andrey
    
    Some useful links:
    - [User Info Github Repository](https://github.com/splendid-pdf/yandex-market/tree/master/user-info-service)

servers:
  - url: http://localhost:8080
tags:
  - name: users
    description: Rest API to work with users

paths:
  /public/api/v1/users:
    post:
      tags:
        - users
      summary: Create user
      operationId: createUser
      requestBody:
        description: JSON Object with user's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                format: uuid
                example: 'b0ca32a7-6960-49a9-9f20-d78fb3799409'

        '400':
          description: Invalid data provided to the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - users
      summary: Get user by email or phone
      operationId: getUserByEmailOrPhone
      parameters:
        - in: query
          name: emailOrPhone
          schema: {
            type: string
          }
          description: The provided user's email or phone
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid data provided to the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User by email or phone {emailOrPhone} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /private/api/v1/users/search:
    post:
      tags:
        - users
      summary: Get paginated list of users by filter
      operationId: getUsersByFilter
      requestBody:
        description: JSON Object with user's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFilter'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid data provided to the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User by email or phone {emailOrPhone} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public/api/v1/users/{externalId}:
    get:
      tags:
        - users
      summary: Get a user by external id
      operationId: getByExternalId
      parameters:
        - in: path
          name: externalId
          description: User External Id
          schema: {
            type: string,
            format: uuid
          }
          example: 'b0ca32a7-6960-49a9-9f20-d78fb3799409'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid data provided to the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User by id {externalId} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: externalId
          in: path
          description: user external id
          required: true
          schema: {
            type: string,
            format: uuid
          }
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid data provided to the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User by id {externalId} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - in: path
          name: externalId
          description: User External Id
          schema: {
            type: string,
            format: uuid
          }
          example: 'b0ca32a7-6960-49a9-9f20-d78fb3799409'
          required: true
      responses:
        '204':
          description: Successfully deleted
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    NotificationSettingsDto:
      type: object
      properties:
        isAllowedToReceiveOnAddress:
          type: boolean
          default: true
          example: true
        isAllowedToSendPromotionsAndMailingLists:
          type: boolean
          default: true
          example: true
        isAllowedToSendPopularArticles:
          type: boolean
          default: true
          example: true
    UserRequestDto:
      type: object
      properties:
        firstName:
          type: string
          example: John
        middleName:
          type: string
          example:
        lastName:
          type: string
          example: Thompson
        phone:
          type: string
          example: '+79241249521'
        email:
          type: string
          example: john-thompson@email.com
        password:
          type: string
          example: 'I_AMfr0mSpb259631!@#'
        birthday:
          type: string
          format: date
          description: Date of birth
          example: 1967-01-02
        sex:
          type: string
          enum:
            - MALE
            - FEMALE
            - NONE
        location:
          $ref: '#/components/schemas/LocationDto'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactDto'
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettingsDto'
        photoId:
          type: string
          example: 'id2003104u48396'
    UserResponseDto:
      type: object
      properties:
        externalId:
          type: string
          format: uuid
          example: '8a8ecdcc-6a9b-4c5a-8a71-3f7a377ae4cd'
        firstName:
          type: string
          example: John
        middleName:
          type: string
          example:
        lastName:
          type: string
          example: Thompson
        phone:
          type: string
          example: '+79241249521'
        email:
          type: string
          example: john-thompson@email.com
        birthday:
          type: string
          format: date
          description: Date of birth
          example: 1967-01-02
        sex:
          type: string
          enum:
            - MALE
            - FEMALE
            - NONE
        location:
          $ref: '#/components/schemas/LocationDto'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactDto'
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettingsDto'
        photoId:
          type: string
          example: 'id2003104u48396'
    LocationDto:
      type: object
      properties:
        country:
          type: string
          example: 'USA'
        region:
          type: string
          example: 'Florida'
        city:
          type: string
          example: 'Saint-Petersburg'
        postcode:
          type: string
          example: '33112'
        street:
          type: string
          example: 'Ocean Drive'
        houseNumber:
          type: integer
          format: int32
          example: 5
        apartNumber:
          type: integer
          format: int32
          example: 12
        latitide:
          type: number
          format: double
          example: 59.938627
        longitude:
          type: number
          format: double
          example: 30.346416
    ContactDto:
      type: object
      properties:
        value:
          type: string
          example: 'vk.com/id153215112412'
        type:
          type: string
          enum:
            - VK
            - TWITTER
            - FACEBOOK
            - TELEGRAM
            - INSTAGRAM
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: string
          example: '400'
        message:
          type: string
          example: Entity wasn't found
        timestamp:
          type: string
          format: date-time
          example: '2018-03-20T09:12:28Z'
    UserFilter:
      type: object
      properties:
        firstName:
          type: string
          example: 'Antonio'
        lastName:
          type: string
          example: 'Banderos'
        sex:
          type: string
          example: 'MALE'
        location:
          $ref: '#/components/schemas/LocationFilter'
        birthdayFrom:
          type: string
          format: date
          description: Date of birth
          example: 1989-01-02
        birthdayTo:
          type: string
          format: date
          description: Date of birth
          example: 1989-02-02
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettingsDto'
    LocationFilter:
      type: object
      properties:
        country:
          type: string
          example: 'Russia'
        city:
          type: string
          example: 'Saint-Petersburg'
        street:
          type: string
          example: 'Nevskii prospect'
        streetNumber:
          type: string
          example: '10'
        latitude:
          type: number
          format: double
          example: 59.930393
        longitude:
          type: number
          format: double
          example: 30.372081
        radius:
          type: number
          format: double
          example: 10.0
  requestBodies:
    User:
      description: User object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRequestDto'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserRequestDto'