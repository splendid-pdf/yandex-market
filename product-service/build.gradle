plugins {
    id 'com.marketplace.common'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

ext {
    set('flywayCoreVersion', '9.10.2')
    set('swaggerVersion', '2.2.7')
    set('mockitoInlineVersion', '4.10.0')
    set('openapitoolsJacksonDatabindVersion', '0.2.4')
    set('openapiUiVersion', '2.0.2')
    set("springCloudConfigVersion", "2022.0.1")
    set("h2databaseVersion", "2.1.214")
}

dependencies {
    implementation project(':commons')

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework:spring-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //spring cloud
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    // open api
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapiUiVersion}"

    // db
    implementation "org.flywaydb:flyway-core:${flywayCoreVersion}"
    runtimeOnly 'org.postgresql:postgresql'

    // utils
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // open api
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.10.5'

    //kafka
    //implementation 'org.springframework.kafka:spring-kafka:3.0.5'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.mockito:mockito-inline:${mockitoInlineVersion}"
    testImplementation "com.h2database:h2:${h2databaseVersion}"

    testImplementation 'org.testcontainers:postgresql:1.17.6'

    // annotation processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudConfigVersion}"
    }
}

bootBuildImage {
    def account = rootProject.property('dockerHubUsername')
    imageName = "${account}/${project.name}:${project.version}"
    publish = true
    environment = [
            "BP_JVM_VERSION" : "${compileJava.sourceCompatibility}"
    ]
    docker {
        publishRegistry {
            username = account
            password = rootProject.property('dockerHubPassword')
        }
    }
}

repositories {
    mavenCentral()
}

tasks.register("prepareKotlinBuildScriptModel") {}