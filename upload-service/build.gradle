plugins {
	id 'com.marketplace.common'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
}

ext {
	set("springCloudVersion", "2022.0.1")
}


dependencies {
	implementation project(':commons')

	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework:spring-context-support:6.0.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


	// Cloud
	implementation 'org.springframework.cloud:spring-cloud-config-client'

	implementation 'org.eclipse.angus:angus-mail:2.0.1'

	implementation 'commons-io:commons-io:2.11.0'

	// Validation
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

	// Amazon web services
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.400'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.10.5'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

bootBuildImage {
	def account = rootProject.property('dockerHubUsername')
	imageName = "${account}/${project.name}:${project.version}"
	publish = true
	environment = [
			"BP_JVM_VERSION" : "${compileJava.sourceCompatibility}"
	]
	docker {
		publishRegistry {
			username = account
			password = rootProject.property('dockerHubPassword')
		}
	}
}

repositories {
    mavenCentral()
}