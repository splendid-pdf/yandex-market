plugins {
    id 'com.marketplace.common'
    alias libs.plugins.jib
    alias libs.plugins.spring.boot
    alias libs.plugins.spring.dependency.management
}

ext {
    set('mapstruct', '1.5.3.Final')
    set('openapi', '2.0.2')
    set('commonslang3', '3.12.0')
    set('projectlombok', '1.18.24')
    set('testcontainersjunit', '1.17.6')
    set('mockitoInlineVersion', '4.10.0')
    set('testcontainerspostgresql', '1.17.6')
    set('H2', '2.1.214')
    set('assertJVersion', '3.24.2')
    set("springCloudConfigVersion", "2022.0.1")
}

dependencies {
    implementation project(':commons')

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework:spring-jdbc'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //spring cloud
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    // open api
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapi}"

    // db
    runtimeOnly 'org.postgresql:postgresql'

    // monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.10.5'

    // annotation processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoInlineVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersjunit}"
    testImplementation "org.testcontainers:postgresql:1.17.6"
    testImplementation "com.h2database:h2:${H2}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudConfigVersion}"
    }
}

jib {
    from {
        image = 'gcr.io/distroless/java17-debian11'
    }
    to {
        image = "${dockerHubUsername}/${project.name}:${project.version}"
        tags = [version, project.getVersion()] as List<String>
        auth {
            username = dockerHubUsername
            password = dockerHubPassword
        }
    }
    container {
        creationTime = Instant.now().toString()
        format = com.google.cloud.tools.jib.api.buildplan.ImageFormat.OCI
    }
}